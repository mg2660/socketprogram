#include <iostream>
#include <cstring>
#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

const int PORT = 12345;
const char* SERVER_IP = "127.0.0.1";
const int BUFFER_SIZE = 1024;

int main() {
    int clientSocket;
    struct sockaddr_in serverAddr;
    char buffer[BUFFER_SIZE];

    // Create socket
    clientSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (clientSocket == -1) {
        std::cerr << "Error creating socket." << std::endl;
        return -1;
    }

    // Configure server address
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(PORT);
    inet_pton(AF_INET, SERVER_IP, &serverAddr.sin_addr);

    // Connect to server
    if (connect(clientSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == -1) {
        std::cerr << "Error connecting to the server." << std::endl;
        close(clientSocket);
        return -1;
    }

    while (true) {
        // Get user input for the command
        std::cout << "\nEnter command (device:action): ";
        std::cin.getline(buffer, BUFFER_SIZE);

        // Send command to server
        send(clientSocket, buffer, strlen(buffer), 0);
		
        char response[BUFFER_SIZE];
    	int byteRead= recv(clientSocket, response, sizeof(response),0);
        if(byteRead<=0)
        std::cerr<<"\nError receiving response \n";
        else{
         response[byteRead]='\0';
	 std::cout<<"Server response: "<<response<<std::endl;
	  }
	
        // Check if the user wants to exit
        if (strcmp(buffer, "exit") == 0) {
            break;
        }
    }

    // Close client socket
    close(clientSocket);

    return 0;
}
